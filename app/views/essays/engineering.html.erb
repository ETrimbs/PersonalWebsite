<h1>On Engineering</h1>
<p class="essay">
<div class="tab"></div>Time is the great revealer - it will either prove you a to be a winner or expose you. Software engineering is no different. All my software creations are made with this principle in mind. If one created with poor habits, their sloppy work will with no doubt eventually manifest itself in unreadable code, bugs, poor user interaction, production crashes, and a host of other plagues not seen since the pharaohs.

<br/><span class="tab"></span>With these beliefs as a background I try to employ the most rigorous software creation/maintenance principles in my work. New features first enter the project as tests. Then, code is written to meet the requirements of the test. Tests are run often to ensure continued functionality before merges back to the main development repository and before they reach production. Practical example: let's say a home page of a website needs to have a link in the header to the projects page. First, I write a test that passes if there appears a link in the header of the home page and that when clicked, the page switches to the project page. This is before any actual code is written in the html of the home page, so, at first, the test fails. Then, I work on adding in the code for the link. Lastly, I run the test file which contains this test as well as every test for every feature on the site. This ensure that not only the new link works, but that I have not broken anything in the process of adding it. After a full success, I push the change using git to keep track of all previous and future changes to the codebase for backup purposes, and the new feature is ready for production.

<br/><span class="tab"></span>The process may seem slow, but the test-first approach has two major benefits that pay dividends. First, it gives developers a small, concrete goal to work towards that feels rewarding once accomplished. Second, it ensures that tests are written now, and not "when I have time", potentially never at all. We have all been there and it is not sustainable. Third, tests are written by the developers who know the code and feature requirements and how the software all needs to fit together; not a third party QA team who potentially has never even seen the code. 

<br/><span class="tab"></span>I believe good habits will lead to success over time. When it comes to the complex world of software, bad habits will always cause serious expenses, reliability issues, and longer development time than buckling down and doing a good job the first time. That is why I believe implementing these well-established, reliable software engineering practices. 
</p>